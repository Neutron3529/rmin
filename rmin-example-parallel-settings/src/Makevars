STATLIB = $(LIBDIR)/libPS.so
TARGET_DIR = ./../target
LIBDIR = $(TARGET_DIR)/release
R_SCRIPT_DIR = ./../R/

all: rust_clean

$(SHLIB): $(STATLIB)

CARGOTMP = $(CURDIR)/.cargo

$(STATLIB):
	# In some environments, ~/.cargo/bin might not be included in PATH, so we need
	# to set it here to ensure cargo can be invoked. It is appended to PATH and
	# therefore is only used if cargo is absent from the user's PATH.
	if [ "$(NOT_CRAN)" != "true" ]; then \
		export CARGO_HOME=$(CARGOTMP); \
	fi && \
		export PATH="$(PATH):$(HOME)/.cargo/bin" && \
		cargo build --lib --release --manifest-path=$(TARGET_DIR)/../Cargo.toml --target-dir $(TARGET_DIR) && \
		cp $(STATLIB) $(SHLIB) && \
	if [ "$(NOT_CRAN)" != "true" ]; then \
		rm -Rf $(CARGOTMP) && \
		rm -rf $(TARGET_DIR) ; \
	fi

rust_clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS)

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) $(TARGET_DIR)
